--- /proc/self/fd/11	2022-03-06 21:01:28.194491289 -0100
+++ kore_mustach.c	2022-03-06 20:59:44.581152211 -0100
@@ -333,15 +333,12 @@
     if (o == NULL)
         return (NULL);
 
-    while (type <= KORE_JSON_TYPE_INTEGER_U64) {
+    while (type <= KORE_JSON_TYPE_LITERAL) {
 
         if ((item = kore_json_find(o, name, type)) != NULL)
             return (item);
 
-        if (kore_json_errno() != KORE_JSON_ERR_TYPE_MISMATCH)
-            return (NULL);
-
-        type = type << 1;
+        type++;
     }
 
     return (NULL);
@@ -465,8 +462,6 @@
 compare(struct kore_json_item *o, const char *value)
 {
     double      d;
-    int64_t     i;
-    uint64_t    u;
     int         err;
 
     switch (o->type) {
@@ -474,14 +469,6 @@
             d = kore_strtodouble(value, DBL_MIN, DBL_MAX, &err);
             return (!err) ? 0 : (o->data.number > d) - (o->data.number < d);
 
-        case KORE_JSON_TYPE_INTEGER:
-            i = kore_strtonum64(value, 1, &err);
-            return (!err) ? 0 : (o->data.integer > i) - (o->data.integer < i);
-
-        case KORE_JSON_TYPE_INTEGER_U64:
-            u = kore_strtonum64(value, 0, &err);
-            return (!err) ? 0 : (o->data.u64 > u) - (o->data.u64 < u);
-
         case KORE_JSON_TYPE_STRING:
             return (strcmp(o->data.string, value));
 
@@ -577,9 +564,6 @@
 {
     size_t err = mustach_errno * -1;
 
-    if (mustach_errno == kore_json_errno())
-        return (kore_json_strerror());
-
     if (err < sizeof(mustach_errtab) / sizeof(mustach_errtab[0]))
         return (mustach_errtab[err]);
 
@@ -595,7 +579,6 @@
     mustach_errno = mustach_file(template, 0, &itf, &cl, flags, 0);
 
     if (mustach_errno >= 0) {
-        mustach_errno = kore_json_errno();
         *result = cl.result;
     } else {
         kore_buf_free(cl.result);
@@ -612,7 +595,7 @@
     struct kore_json json = {};
 
     if (data != NULL) {
-        kore_json_init(&json, data, strlen(data));
+        kore_json_init(&json, (const uint8_t *)data, strlen(data));
         kore_json_parse(&json);
     }
 
